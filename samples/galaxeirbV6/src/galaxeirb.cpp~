#include "common.h"
#include <iostream>
#include <stdlib.h>
#include <fstream>
#include <sstream>
#include "esUtil.h"
#include <cstddef>
#include <math.h>
#include <utility>
#include <CL/cl.h>
#include <sys/time.h>

#define MODULO 80
#define NB_PARTICLES (81920/MODULO)
#define TO 0.5f
#define DT 0.01f
#define M 2
#define FILENAME "../dubinski.tab"
#define MOYENNAGE 20

using namespace std;

#define WORKDIMENSION 1


cl_context context = 0;
cl_command_queue commandQueue = 0;
cl_program program = 0;
cl_device_id device = 0;
cl_kernel kernel = 0;
cl_kernel kernel2 = 0;
const unsigned int numberOfMemoryObjects = 2;
cl_mem memoryObjects[numberOfMemoryObjects] = {0, 0};
cl_int errorNumber;
size_t bufferSize = NB_PARTICLES * sizeof(cl_float4);

bool createMemoryObjectsSuccess = true;
cl_float4* popencl;
cl_float4* accopencl;

	float fps = 0.0;
	float fpstemp= 0.0;
	int counter = 0;
	float fpsmax = -10.0;
	float fpsmin = 10000.0;


	struct timeval begin, end;





typedef struct particule_t
{
	float m;
	float px;
	float py;
	float pz;
	float vx;
	float vy;
	float vz;
} particule;

int tailleFichier =0;
GLfloat vVertices[4*NB_PARTICLES];
particule *list = NULL;




void setColor (){
	

for (int i=0; i <NB_PARTICLES; i++)
	{

		if (i*MODULO > 16384 && i*MODULO<32768)
			vVertices[i*4] = 0.0f;
		else if  (i*MODULO >= 40961 && i*MODULO < 49152) 
			vVertices[i*4] = 0.0f;
		else if ( i*MODULO >= 65536)
vVertices[i*4] = 0.0f;
		else if (i*MODULO < 16384)
vVertices[i*4] = 1.0f;
		else if  (i*MODULO>=32768 && i*MODULO<40961) 
vVertices[i*4] = 1.0f;
		else if  (i*MODULO>=49152 && i*MODULO<65536) 
vVertices[i*4] = 1.0f;
}




}



void UpdateVertices (){
	int i;
	int j=0;

	for(i=0 ; i<NB_PARTICLES*4 ; i=i+4  )
	{


		vVertices[i]=popencl[j].x/64.0f;
		vVertices[i+1]=popencl[j].y/64.0f;
		vVertices[i+2]=popencl[j].z/64.0f;
		j++;
	}
}


particule *LoadFile(char *file, int *t)
{
	particule *p = NULL, buf;
	FILE* fichier = NULL;
	int i,j=0;
	fichier = fopen(file, "r");
	if (fichier != NULL)
	{	
		fscanf(fichier, "%d", t) ;
		p = (particule*)malloc(sizeof(particule) * (*t));
		if (p == NULL)
		{
			printf("Probleme allocation memoire liste particule");
			exit(0);
		}

		for (i=0; i< *t; i++)
		{
			if ((i %MODULO) == 0)
				fscanf(fichier, "%f %f %f %f %f %f %f", &p[j].m, &p[j].px, &p[j].py, &p[j].pz, &p[j].vx, &p[j].vy, &p[j++].vz);

			else {
				fscanf(fichier, "%f %f %f %f %f %f %f", &buf.m, &buf.px, &buf.py, &buf.pz, &buf.vx, &buf.vy, &buf.vz);
			}
		}
		fclose(fichier);
	}else
	{
		printf( "Probleme d'ouverture %s", file);
	}

	*t=j;

	return p;

}

typedef struct
{
	// Handle to a program object
	GLuint programObject;

} UserData;

///
// Create a shader object, load the shader source, and
// compile the shader.
//
GLuint LoadShader ( GLenum type, const char *shaderSrc )
{
	GLuint shader;
	GLint compiled;

	// Create the shader object
	shader = glCreateShader ( type );

	if ( shader == 0 )
		return 0;

	// Load the shader source
	glShaderSource ( shader, 1, &shaderSrc, NULL );

	// Compile the shader
	glCompileShader ( shader );

	// Check the compile status
	glGetShaderiv ( shader, GL_COMPILE_STATUS, &compiled );

	if ( !compiled ) 
	{
		GLint infoLen = 0;

		glGetShaderiv ( shader, GL_INFO_LOG_LENGTH, &infoLen );

		if ( infoLen > 1 )
		{
			char* infoLog = (char*) malloc (sizeof(char) * infoLen );

			glGetShaderInfoLog ( shader, infoLen, NULL, infoLog );
			esLogMessage ( "Error compiling shader:\n%s\n", infoLog );            

			free ( infoLog );
		}

		glDeleteShader ( shader );
		return 0;
	}

	return shader;

}

///
// Initialize the shader and program object
//
int Init ( ESContext *esContext )
{
	esContext->userData = (UserData*) malloc(sizeof(UserData));

	UserData *userData = (UserData*) esContext->userData;
	GLbyte vShaderStr[] =  
		"attribute vec4 vPosition;    \n"
		"varying vec4 v_color; //output vertex color \n"
		"void main()                  \n"
		"{                            \n"
		"   gl_Position.x = vPosition.x;  \n"
		"   gl_Position.y = vPosition.y;  \n"
		"   gl_Position.z = vPosition.z;  \n"
		"   gl_Position.w = 1.0;  \n"
" const float MODULOf=80.0; \n"
	"	if (vPosition.w == 0.0) \n"
	"		v_color= vec4 (1.0, 0.0, 0.0 , 1.0); \n"
	"	else                                         \n"
	"		v_color= vec4 (0.0, 0.0, 1.0, 1.0 ); \n"
		"}                            \n";




	GLbyte fShaderStr[] =  
		"precision mediump float;\n"\
		"varying vec4 v_color; \n"
		"void main()                                  \n"
		"{  \n"
			"	gl_FragColor = v_color;\n"	                                     
			"}                                            \n";

	GLuint vertexShader;
	GLuint fragmentShader;
	GLuint programObject;
	GLint linked;

	// Load the vertex/fragment shaders
	vertexShader =  LoadShader ( GL_VERTEX_SHADER, ( char*) vShaderStr );
	fragmentShader = LoadShader ( GL_FRAGMENT_SHADER, (char *) fShaderStr );


	printf( "%d %d\n",  vertexShader, fragmentShader);

	// Create the program object
	programObject = glCreateProgram ( );

	if ( programObject == 0 )
		return 0;


	glAttachShader ( programObject, vertexShader );
	glAttachShader ( programObject, fragmentShader );

	// Bind vPosition to attribute 0   
	glBindAttribLocation ( programObject, 0, "vPosition" );

	// Link the program
	glLinkProgram ( programObject );



	// Check the link status
	glGetProgramiv ( programObject, GL_LINK_STATUS, &linked );

	if ( !linked ) 
	{
		GLint infoLen = 0;

		glGetProgramiv ( programObject, GL_INFO_LOG_LENGTH, &infoLen );

		if ( infoLen > 1 )
		{
			char* infoLog = (char *) malloc (sizeof(char) * infoLen );

			glGetProgramInfoLog ( programObject, infoLen, NULL, infoLog );
			esLogMessage ( "Error linking program:\n%s\n", infoLog );            

			free ( infoLog );
		}

		glDeleteProgram ( programObject );
		return GL_FALSE;
	}

	// Store the program object
	userData->programObject = programObject;

	glClearColor ( 0.0f, 0.0f, 0.0f, 0.0f );

	
	return GL_TRUE;
}



/////////////////////////////////////////////////////////////////////
//				DRAW				   //
/////////////////////////////////////////////////////////////////////

void Draw ( ESContext *esContext )
{

size_t globalWorksize[1] = {NB_PARTICLES};


	gettimeofday( &begin, NULL );

	UserData *userData = (UserData*) esContext->userData;



	/* Setup the kernel arguments.  */
	bool setKernelArgumentsSuccess = true;
	setKernelArgumentsSuccess &= checkSuccess(clSetKernelArg(kernel, 0, sizeof(cl_mem), &memoryObjects[0]));
	setKernelArgumentsSuccess &= checkSuccess(clSetKernelArg(kernel, 1, sizeof(cl_mem), &memoryObjects[1]));

	if (!setKernelArgumentsSuccess)
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed setting OpenCL kernel arguments. " << __FILE__ << ":"<< __LINE__ << endl;
		return ;
	}

	
////////////////////////////////
//  	Lancement Kernel      //
////////////////////////////////
	cl_event event = 0;
	/* Enqueue the kernel */
	if (!checkSuccess(clEnqueueNDRangeKernel(commandQueue, kernel, 1, NULL, globalWorksize, NULL, 0, NULL, &event)))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed enqueuing the kernel. " << __FILE__ << ":"<< __LINE__ << endl;
		return ;
	}

	/* Wait for kernel execution completion. */
	if (!checkSuccess(clFinish(commandQueue)))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed waiting for kernel execution to finish. " << __FILE__ << ":"<< __LINE__ << endl;
		return ;
	}

	/* Print the profiling information for the event. */
	// printProfilingInfo(event);
	/* Release the event object. */
	if (!checkSuccess(clReleaseEvent(event)))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed releasing the event object. " << __FILE__ << ":"<< __LINE__ << endl;
		return ;
	}

////////////////////////////////
//  	   Fin Kernel1        //
////////////////////////////////

////////////////////////////////
//     	  Prepa Kernel2       //
////////////////////////////////

/* Setup the kernel arguments.  */
	setKernelArgumentsSuccess = true;
	setKernelArgumentsSuccess &= checkSuccess(clSetKernelArg(kernel2, 0, sizeof(cl_mem), &memoryObjects[0]));
	setKernelArgumentsSuccess &= checkSuccess(clSetKernelArg(kernel2, 1, sizeof(cl_mem), &memoryObjects[1]));

	if (!setKernelArgumentsSuccess)
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed setting OpenCL kernel arguments. " << __FILE__ << ":"<< __LINE__ << endl;
		return ;
	}
////////////////////////////////
//  	Lancement Kernel2     //
////////////////////////////////
	 event = 0;
	/* Enqueue the kernel */
	if (!checkSuccess(clEnqueueNDRangeKernel(commandQueue, kernel2, 1, NULL, globalWorksize, NULL, 0, NULL, &event)))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed enqueuing the kernel. " << __FILE__ << ":"<< __LINE__ << endl;
		return ;
	}

	/* Wait for kernel execution completion. */
	if (!checkSuccess(clFinish(commandQueue)))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed waiting for kernel execution to finish. " << __FILE__ << ":"<< __LINE__ << endl;
		return ;
	}

	/* Print the profiling information for the event. */
	// printProfilingInfo(event);
	/* Release the event object. */
	if (!checkSuccess(clReleaseEvent(event)))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed releasing the event object. " << __FILE__ << ":"<< __LINE__ << endl;
		return ;
	}
////////////////////////////////
//  	   Fin Kernel2        //
////////////////////////////////



	/* Get a pointer to the output data. */
	popencl = (cl_float4*)clEnqueueMapBuffer(commandQueue, memoryObjects[0], CL_TRUE, CL_MAP_READ, 0, bufferSize, 0, NULL, NULL, &errorNumber);
	if (!checkSuccess(errorNumber))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed to map buffer. " << __FILE__ << ":"<< __LINE__ << endl;
		return ;
	}
/*
//a remplacer par appel direct au popencl pour eviter de réecrire
	for(int i=0; i<NB_PARTICLES; i++)
	{
		list[i].px=popencl[i].x;
		list[i].py=popencl[i].y;
		list[i].pz=popencl[i].z;

	} */

		UpdateVertices();
gettimeofday( &end, NULL );

fps = (float)1.0f / ( ( end.tv_sec - begin.tv_sec ) * 1000000.0f + end.tv_usec - begin.tv_usec) * 1000000.0f;

		counter++;
		fpstemp+=fps;

		if (counter == MOYENNAGE-1)
		{
			counter=0;
			printf( "FPS : %.4f\n", fpstemp/(double)MOYENNAGE );
			fpstemp=0.0f;
			
		}
//liberation mémoire

if (!checkSuccess(clEnqueueUnmapMemObject(commandQueue, memoryObjects[0], popencl, 0, NULL, NULL)))
    {
       cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
       cerr << "Unmapping memory objects failed " << __FILE__ << ":"<< __LINE__ << endl;
       return ;
    }


//Fin opencl




	// Set the viewport
	glViewport ( 0, 0, esContext->width, esContext->height );

	// Clear the color buffer
	glClear ( GL_COLOR_BUFFER_BIT );

	// Use the program object
	glUseProgram ( userData->programObject );

	// Load the vertex data
	glVertexAttribPointer ( 0, 4, GL_FLOAT, GL_FALSE, 0,vVertices );
	glEnableVertexAttribArray ( 0 );

	glDrawArrays ( GL_POINTS, 0, NB_PARTICLES );
}



/////////////////////////////////////////////////////////////////////
//				MAIN				   //
/////////////////////////////////////////////////////////////////////



int main ( int argc, char *argv[] )
{
	int i;

	list = LoadFile(FILENAME, &tailleFichier); 

	setColor();
	//UpdateVertices();


////////////////////////////////
//  OPENCL  CONFIGURATION     //
////////////////////////////////


	if (!createContext(&context))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed to create an OpenCL context. " << __FILE__ << ":"<< __LINE__ << endl;
		return 1;
	}

	if (!createCommandQueue(context, &commandQueue, &device))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed to create the OpenCL command queue. " << __FILE__ << ":"<< __LINE__ << endl;
		return 1;
	}

	if (!createProgram(context, device, "assets/galaxeirb.cl", &program))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed to create OpenCL program." << __FILE__ << ":"<< __LINE__ << endl;
		return 1;
	}
////////////////////////////////
// 	Creation Kernel       //
////////////////////////////////

	kernel = clCreateKernel(program, "galaxeirb", &errorNumber);
	if (!checkSuccess(errorNumber))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed to create OpenCL kernel. " << __FILE__ << ":"<< __LINE__ << endl;
		return 1;
	}


//deuxieme kernel
	kernel2 = clCreateKernel(program, "kernel_updatePos", &errorNumber);
	if (!checkSuccess(errorNumber))
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed to create OpenCL kernel. " << __FILE__ << ":"<< __LINE__ << endl;
		return 1;
	}


////////////////////////////////
// Initialize MEMORY from CPU //
////////////////////////////////


	memoryObjects[0] = clCreateBuffer(context,  CL_MEM_READ_WRITE  | CL_MEM_ALLOC_HOST_PTR, bufferSize, NULL, &errorNumber);
	createMemoryObjectsSuccess &= checkSuccess(errorNumber);
	memoryObjects[1] = clCreateBuffer(context,  CL_MEM_READ_WRITE  | CL_MEM_ALLOC_HOST_PTR, bufferSize, NULL, &errorNumber);
	createMemoryObjectsSuccess &= checkSuccess(errorNumber);
	
	if (!createMemoryObjectsSuccess)
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Failed to create OpenCL buffers. " << __FILE__ << ":"<< __LINE__ << endl;
		return 1;
	}




	popencl = (cl_float4*)clEnqueueMapBuffer(commandQueue, memoryObjects[0], CL_TRUE, CL_MAP_WRITE, 0, bufferSize, 0, NULL, NULL, &errorNumber);

	if (!checkSuccess(errorNumber)) //test si le map sont successful
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Mapping memory objects failed " << __FILE__ << ":"<< __LINE__ << endl;
		return 1;
	}
	
	accopencl = (cl_float4*)clEnqueueMapBuffer(commandQueue, memoryObjects[1], CL_TRUE, CL_MAP_WRITE, 0, bufferSize, 0, NULL, NULL, &errorNumber);



	if (!checkSuccess(errorNumber)) //test si le map sont successful
	{
		cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
		cerr << "Mapping memory objects failed " << __FILE__ << ":"<< __LINE__ << endl;
		return 1;
	}


//mtn j'écris dans la mémoire en utilisant les pointeurs sur la shared memory
	for (int i = 0; i < NB_PARTICLES; i++)
	{
		popencl[i].x   = list[i].px;
		popencl[i].y   = list[i].py;
		popencl[i].z   = list[i].pz;
		popencl[i].w   = list[i].m;
		accopencl[i].x = list[i].vx;
		accopencl[i].y = list[i].vy;
		accopencl[i].z = list[i].vz;
		accopencl[i].w = list[i].m;
		
	}
	

//Libération de la mémoire côté CPU pour l'utiliser sur le GPU

    if (!checkSuccess(clEnqueueUnmapMemObject(commandQueue, memoryObjects[0], popencl, 0, NULL, NULL)))
    {
       cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
       cerr << "Unmapping memory objects failed " << __FILE__ << ":"<< __LINE__ << endl;
       return 1;
    }
    if (!checkSuccess(clEnqueueUnmapMemObject(commandQueue, memoryObjects[1], accopencl, 0, NULL, NULL)))
    {
       cleanUpOpenCL(context, commandQueue, program, kernel, memoryObjects, numberOfMemoryObjects);
       cerr << "Unmapping memory objects failed " << __FILE__ << ":"<< __LINE__ << endl;
       return 1;
    }



////////////////////////////////
// 	Affichage Graphique   //
////////////////////////////////



	ESContext esContext;
	UserData  userData;

	esInitContext ( &esContext );
	esContext.userData = &userData;

	esCreateWindow ( &esContext, "GalaxEirb", 640, 480, ES_WINDOW_RGB );

	if ( !Init ( &esContext ) )
		return 0;



	esRegisterDrawFunc ( &esContext, Draw );

	esMainLoop ( &esContext );

}
