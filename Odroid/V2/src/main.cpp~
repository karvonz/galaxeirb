//
// Book:      OpenGL(R) ES 2.0 Programming Guide
// Authors:   Aaftab Munshi, Dan Ginsburg, Dave Shreiner
// ISBN-10:   0321502795
// ISBN-13:   9780321502797
// Publisher: Addison-Wesley Professional
// URLs:      http://safari.informit.com/9780321563835
//            http://www.opengles-book.com
//

// Hello_Triangle.c
//
//    This is a simple example that draws a single triangle with
//    a minimal vertex/fragment shader.  The purpose of this 
//    example is to demonstrate the basic concepts of 
//    OpenGL ES 2.0 rendering.
#include <stdlib.h>
#include "esUtil.h"
#include <stdio.h>
#include <math.h>
#include <utility>
#define __NO_STD_VECTOR // Use cl::vector instead of STL version
#include <CL/cl.hpp>
//#include <omp.h>


#define MODULO 80
#define NB_PARTICLES (81920/MODULO)
#define TO 0.5f
#define DT 0.01f
#define M 2

#define FILENAME "../dubinski.tab"

typedef struct particule_t
{
	float m;
	float px;
	float py;
	float pz;
	float vx;
	float vy;
	float vz;
} particule;

		int tailleFichier =0;
	GLfloat vVertices[3*NB_PARTICLES];
	particule *list = NULL;


void UpdateVertices (){
int i;
	int j=0;
	for(i=0 ; i<NB_PARTICLES*3 ; i=i+3  )
	{
		vVertices[i]=list[j].px/64.0f;
		vVertices[i+1]=list[j].py/64.0f;
		vVertices[i+2]=list[j].pz/64.0f;
	j++;
	}
}

void UpdateGalaxy(){

	int i, j;

//#pragma omp parallel for 
	for (i=0; i<NB_PARTICLES; i++){
		float acceleration[3]={0.0f};


//#pragma omp parallel for
		for (j=0; j<NB_PARTICLES; j++){
		
			float dx,dy, dz;	
			float dist, coef;
			dx=list[j].px-list[i].px;
			dy=list[j].py-list[i].py;
			dz=list[j].pz-list[i].pz;	
			dist = sqrtf(dx*dx+dy*dy+dz*dz);
			if (dist < 1.0f)
				dist= 1.0f;

			coef= list[j].m / (dist* dist * dist) ;
						
acceleration[0] += dx * coef;
			acceleration[1] += dy * coef;
			acceleration[2] += dz * coef;
		}

		list[i].vx+=acceleration[0]*TO* M;
		list[i].vy+=acceleration[1]*TO* M;
		list[i].vz+=acceleration[2]*TO* M;
		
	}
	

	for (i=0; i<NB_PARTICLES; i++){
		list[i].px+=list[i].vx*DT;
		list[i].py+=list[i].vy*DT;
		list[i].pz+=list[i].vz*DT;

	} 

}

particule *LoadFile(char *file, int *t)
{
	particule *p = NULL, buf;
	FILE* fichier = NULL;
	int i,j=0;
	fichier = fopen(file, "r");
	if (fichier != NULL)
	{	
		fscanf(fichier, "%d", t) ;
		p = (particule*)malloc(sizeof(particule) * (*t));
		if (p == NULL)
		{
			printf("Probleme allocation memoire liste particule");
			exit(0);
		}

		for (i=0; i< *t; i++)
		{
			if ((i %MODULO) == 0)
				fscanf(fichier, "%f %f %f %f %f %f %f", &p[j].m, &p[j].px, &p[j].py, &p[j].pz, &p[j].vx, &p[j].vy, &p[j++].vz);

			else {
				fscanf(fichier, "%f %f %f %f %f %f %f", &buf.m, &buf.px, &buf.py, &buf.pz, &buf.vx, &buf.vy, &buf.vz);
			}
		}
		fclose(fichier);
	}else
	{
		printf( "Probleme d'ouverture %s", file);
	}

	*t=j;

	return p;

}

typedef struct
{
   // Handle to a program object
   GLuint programObject;

} UserData;

///
// Create a shader object, load the shader source, and
// compile the shader.
//
GLuint LoadShader ( GLenum type, const char *shaderSrc )
{
   GLuint shader;
   GLint compiled;
   
   // Create the shader object
   shader = glCreateShader ( type );

   if ( shader == 0 )
   	return 0;

   // Load the shader source
   glShaderSource ( shader, 1, &shaderSrc, NULL );
   
   // Compile the shader
   glCompileShader ( shader );

   // Check the compile status
   glGetShaderiv ( shader, GL_COMPILE_STATUS, &compiled );

   if ( !compiled ) 
   {
      GLint infoLen = 0;

      glGetShaderiv ( shader, GL_INFO_LOG_LENGTH, &infoLen );
      
      if ( infoLen > 1 )
      {
         char* infoLog = (char*) malloc (sizeof(char) * infoLen );

         glGetShaderInfoLog ( shader, infoLen, NULL, infoLog );
         esLogMessage ( "Error compiling shader:\n%s\n", infoLog );            
         
         free ( infoLog );
      }

      glDeleteShader ( shader );
      return 0;
   }

   return shader;

}

///
// Initialize the shader and program object
//
int Init ( ESContext *esContext )
{
   esContext->userData = (UserData*) malloc(sizeof(UserData));

   UserData *userData = (UserData*) esContext->userData;
   GLbyte vShaderStr[] =  
      "attribute vec4 vPosition;    \n"
      "void main()                  \n"
      "{                            \n"
      "   gl_Position = vPosition;  \n"
      "}                            \n";
   
   GLbyte fShaderStr[] =  
      "precision mediump float;\n"\
      "void main()                                  \n"
      "{                                            \n"
      "  gl_FragColor = vec4 ( 1.0, 0.0, 0.0, 1.0 );\n"
      "}                                            \n";

   GLuint vertexShader;
   GLuint fragmentShader;
   GLuint programObject;
   GLint linked;

   // Load the vertex/fragment shaders
   vertexShader =  LoadShader ( GL_VERTEX_SHADER, ( char*) vShaderStr );
   fragmentShader = LoadShader ( GL_FRAGMENT_SHADER, (char *) fShaderStr );


   printf( "%d %d\n",  vertexShader, fragmentShader);

   // Create the program object
   programObject = glCreateProgram ( );
   
   if ( programObject == 0 )
      return 0;

   glAttachShader ( programObject, vertexShader );
   glAttachShader ( programObject, fragmentShader );

   // Bind vPosition to attribute 0   
   glBindAttribLocation ( programObject, 0, "vPosition" );

   // Link the program
   glLinkProgram ( programObject );

   // Check the link status
   glGetProgramiv ( programObject, GL_LINK_STATUS, &linked );

   if ( !linked ) 
   {
      GLint infoLen = 0;

      glGetProgramiv ( programObject, GL_INFO_LOG_LENGTH, &infoLen );
      
      if ( infoLen > 1 )
      {
         char* infoLog = (char *) malloc (sizeof(char) * infoLen );

         glGetProgramInfoLog ( programObject, infoLen, NULL, infoLog );
         esLogMessage ( "Error linking program:\n%s\n", infoLog );            
         
         free ( infoLog );
      }

      glDeleteProgram ( programObject );
      return GL_FALSE;
   }

   // Store the program object
   userData->programObject = programObject;

   glClearColor ( 0.0f, 0.0f, 0.0f, 0.0f );
   return GL_TRUE;
}

///
// Draw a triangle using the shader pair created in Init()
//
void Draw ( ESContext *esContext )
{
   UserData *userData = (UserData*) esContext->userData;
  /* GLfloat vVertices[] = {  0.0f,  0.5f, 0.0f, 
                           -0.5f, -0.5f, 0.0f,
                            0.5f, -0.5f, 0.0f };*/
	

	UpdateGalaxy();
	UpdateVertices();
      
   // Set the viewport
   glViewport ( 0, 0, esContext->width, esContext->height );
   
   // Clear the color buffer
   glClear ( GL_COLOR_BUFFER_BIT );

   // Use the program object
   glUseProgram ( userData->programObject );

   // Load the vertex data
   glVertexAttribPointer ( 0, 3, GL_FLOAT, GL_FALSE, 0,vVertices );
   glEnableVertexAttribArray ( 0 );

   glDrawArrays ( GL_POINTS, 0, NB_PARTICLES );
}

int main ( int argc, char *argv[] )
{
//omp_set_num_threads(4);
		list = LoadFile(FILENAME, &tailleFichier); 
	UpdateGalaxy();
	UpdateVertices();
   ESContext esContext;
   UserData  userData;

   esInitContext ( &esContext );
   esContext.userData = &userData;

   esCreateWindow ( &esContext, "Hello Triangle", 640, 480, ES_WINDOW_RGB );

   if ( !Init ( &esContext ) )
      return 0;

   esRegisterDrawFunc ( &esContext, Draw );

   esMainLoop ( &esContext );
}
